from ftplib import FTP
import argparse
import re
from IPy import IP


VERSION = "0.1"
BANNER = f'''
[I] 为了解决当扫描IP段资产后一般工具只能爆破用户，后续只能笨笨的手工登录的问题。
[I] 支持获取ftp目录的树形结构，文件全部打包下载或搜索指定字符串下载文件或文件夹。
[I] 获取banner方便寻找相关exp
[I] Ver {VERSION}
'''
class FtpWorker():
    def __init__(self):
        pass

def bin2ip(header, tailer):
    print(header)
    print(tailer)
    data = bin(tailer)
    data = header + data
    result = []
    assert(len(data) == 32)
    for i in range(0, 32, 8):
        result.append(int('0b' + data[i:i+8], 2))
    result = '.'.join(result)
    print(result)
    return result
    
    
    
def HostMakeer(data): 
    ip = re.compile("^(((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3})$")
    ipRange = re.compile("^(((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}/[0-9]{1,2})")
    # print(ipRange.findall(data)[0][0])
    if ipRange.findall(data) != []:
        ipList = ipRange.findall(data)[0][0]
        ipList = [str(_) for _ in IP(ipList)]
    elif ip.findall(data) != []:
        ipList = [ip.findall(data)[0][0]]
    else:
        ipList = open(data, 'r').readlines()
    ipList = [_.strip() for _ in ipList]
    ipList = list(set(ipList))
    return ipList
    
    
    
def DictMakeer(data): pass


def loadController(args):
    if args.versionOption:
        print(BANNER)
        return
    else:
        args.hosts = HostMakeer(args.hosts)        
        args.user = DictMakeer(args.user)
        args.pwd = DictMakeer(args.pwd)
        worker = FtpWorker()
        worker.run()
        worker.out()
    


if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description="[I] 批量获取已知账号密码的FTP服务中的目录结构，支持统一下载。")
    parser.add_argument("--hosts", "-hs", default="127.0.0.1", help="指定host，如 127.0.0.1或192.168.0.1/24或host.txt", dest="hosts")
    parser.add_argument("--user", "-u", default="ftp", help="指定用户名来源，如 ftp或user.txt", dest="user")
    parser.add_argument("--pwd", "-p", default="ftp", help="指定密码来源，如 ftp或pwd.txt", dest="pwd")
    parser.add_argument("--save", "-s", default="ListDirTree", help="指定输出/下载方式", choices=["ListDirTree", "BackupAll", "SearchAndBackup"], dest="save")
    parser.add_argument("--banner", "-b", action="store_true", help="获取服务Banner，方便后续寻找EXP", dest="bannerOption")
    parser.add_argument("--output", "-o", default="FtpExpOut.txt", help="指定输出另存为文件", dest="outLocation")
    parser.add_argument("--version", "-v", action="store_true", default=False, help="描述和版本信息", dest="versionOption")

    args = parser.parse_args()
    args = loadController(args)
    
    
    
    