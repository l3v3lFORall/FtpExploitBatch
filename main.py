from ftplib import FTP, all_errors, error_perm
import argparse
import re
from IPy import IP
import hashlib
from threading import Thread
import itertools
import base64
import os


VERSION = "0.3"
BANNER = f'''
[I] 为了解决当扫描IP段资产后一般工具只能爆破用户，后续只能笨笨的手工登录的问题。
[I] 支持获取ftp目录的树形结构，文件全部打包下载或搜索指定字符串下载文件或文件夹。
[I] 获取banner方便寻找相关exp
[I] Ver {VERSION}
'''
class __AutoVar__(object):
    def __init__(self):
        self._buff = ""
    def write(self, out_stream):
        self._buff += out_stream
    def flush(self):
        pass
    def __str__(self):
        return self._buff
    

class FtpWorker():
    def __init__(self, args):
        self.checkList = []
        self.args = args
        self.queue = self.maker()
        self.result = {}
    def checker(self, data):
        _md5 = hashlib.md5().update(data).hexdigest()
        if _md5 not in self.checkList:
            self.checkList.append(_md5)
            return True
        else:
            return False
    def maker(self):
        return [_ for _ in itertools.product(self.args.hosts, self.args.user, self.args.pwd)]
 
    def run(self):
        threadList = []
        for i in range(self.args.threadOption):
            threadList.append(Thread(target=self.atom(), args=(), name=f"t{i}"))
        for i in threadList:
            i.start()
        for i in threadList:
            i.join() 
    
    
    def getTree(self, ftpInstance, _host):
        # ftpInstance.set_debuglevel(2)
        _banner = ftpInstance.getwelcome()
        # print(_banner)
        try: 
            _pwd = ['%-20s\t\t\t\t%-20s\t\t\t\t\t%-20s' % (_[0], _[1]['type'], _[1]['modify']) for _ in list(ftpInstance.mlsd())]
            _pwd = '\n'.join(_pwd)
        except error_perm as ep:
            _pwd = __AutoVar__()
            import sys
            temp = sys.stdout
            sys.stdout = _pwd
            ftpInstance.dir()
            sys.stdout = temp
            _pwd = str(_pwd)
        # print(_pwd)
        self.result[_host] = [_banner, _pwd]
        # _bufsize = 2048
        _saveas = f"./{_host}"
        # ftp.retrbinary("RETR filename.txt", open(filename,"wb").write,bufsize)
        if not os.path.exists(_saveas):
            os.mkdir(_saveas)
        f = open(_saveas + "/DirInfo", "wb")
        f.write((_banner + '\n\n\n' + _pwd).encode())
        f.close()
        
        
    def atom(self):
        while self.queue != []:
            # print(self.queue.pop(0), len(self.queue))
            try:
                _host, _user, _pass = self.queue.pop(0)
                ftp = FTP(_host)
                _logInfo = ftp.login(user=_user, passwd=_pass)
                print("[V]", _host, _logInfo)
                self.getTree(ftp, _host)
            except IndexError as _ie:
                pass
            except all_errors as e:
                if "230 Login successful" in _logInfo:
                    self.queue.append((_host, _user, _pass))
                print(e)
                pass
    
    
def HostMakeer(data): 
    ip = re.compile("^(((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3})$")
    ipRange = re.compile("^(((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}/[0-9]{1,2})")
    # print(ipRange.findall(data)[0][0])
    if ipRange.findall(data) != []:
        ipList = ipRange.findall(data)[0][0]
        ipList = [str(_) for _ in IP(ipList)]
    elif ip.findall(data) != []:
        ipList = [ip.findall(data)[0][0]]
    else:
        ipList = open(data, 'r').readlines()
    ipList = [_.strip() for _ in ipList]
    ipList = list(set(ipList))

    return ipList
    
    
    
def DictMakeer(data): 
    try:
        data = open(data, "r").readlines()
        data = [_.strip() for _ in data]
    except  FileNotFoundError as e:
        data = [data]
    # print(data)
    return data


def loadController(args):
    if args.versionOption:
        print(BANNER)
        return
    else:
        args.hosts = HostMakeer(args.hosts)        
        args.user = DictMakeer(args.user)
        args.pwd = DictMakeer(args.pwd)
        worker = FtpWorker(args)
        worker.run()
    


if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description="[I] 批量获取已知账号密码的FTP服务中的目录结构，支持统一下载。")
    parser.add_argument("--hosts", "-hs", default="127.0.0.1", help="指定host，如 127.0.0.1或192.168.0.1/24或host.txt", dest="hosts")
    parser.add_argument("--user", "-u", default="anonymous", help="指定用户名来源，如 ftp或user.txt", dest="user")
    parser.add_argument("--pwd", "-p", default="", help="指定密码来源，如 ftp或pwd.txt", dest="pwd")
    parser.add_argument("--save", "-s", default="ListDirTree", help="指定输出/下载方式", choices=["ListDirTree", "BackupAll", "SearchAndBackup"], dest="save")
    parser.add_argument("--banner", "-b", action="store_true", help="获取服务Banner，方便后续寻找EXP", dest="bannerOption")
    parser.add_argument("--thread", "-t", default=5, type=int, help="线程数量，默认5", dest="threadOption")
    parser.add_argument("--output", "-o", default="FtpExpOut.txt", help="指定输出另存为文件", dest="outLocation")
    parser.add_argument("--version", "-v", action="store_true", default=False, help="描述和版本信息", dest="versionOption")

    args = parser.parse_args()
    args = loadController(args)
    
    
    
    